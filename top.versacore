# The idea is to run core_create() synchronously to configure the dependency tree
# The other functions can be run asynchronously to speed up compilation.
# The idea is to wrap the methods like this:

# for dep in core.dependencies (do this asynchronously (using AsyncIO.wait_for() ?) so they run in parallel):
#     await dep.get_generate(dep)
# await core.generate(core)

NAME = "testcore"
VERSION = "0.0.1"
API_VERSION = "0.1"
DESCRIPTION = ""
    
def TOP(core):
    core.say_hello("Hello from TOP")
    x7_target = core.define_target("xilinx7")
    x7_target.set_core_parameters(kwarg1="yoyoyo")
    core.set_default_target("xilinx7")

def CREATE(core, kwarg1=False):
    core.say_hello(f"testcore.CREATE: {kwarg1}")
    core.depend_on(name="abitu", kwarg1="hejsa")

async def GENERATE(core):
    core.say_hello(f"testcore.GENERATE")

async def CLEAN(core):
    pass

async def GET_SOURCES(core):
    pass

async def PREPARE_SOURCES(core):
    pass
